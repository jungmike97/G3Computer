// Original C++ Program
/*
#include <iostream>
using namespace std;

int main() {
	char para[1000] = "we can get learn from the movie...   that the father are badly sick, so. he just urges. to teach hushpuppy. how to be strong enough to survive by herself.";
	char pattern[100] = "can";

	cout << para << endl;
	cout << pattern << endl;

	int word, sentence;
	word = 0;
	sentence = 1;

	int start = -1;
	for (int i = 0; para[i] != '\0'; ++i) {
		// got a word
		if (!(para[i] >= 'a' && para[i] <= 'z' || para[i] == '\'')) {
			if (start != -1) {
				// compare
				int j;
				for (j = 0; pattern[j] != '\0' && start + j < i && pattern[j] == para[start + j]; ++j);
				if (pattern[j] == '\0' && start + j == i) {
					cout << sentence << endl;
					cout << word << endl;
					cout << pattern << endl;
				}

				// got a sentence
				if (para[i] == '.') {
					word = 0;
					++sentence;
				}

				start = -1;
			}
		}
		else if (start == -1) {
			start = i;
			++word;
		}
	}
	return 0;
}
*/

// -----------------------------------------------------------------------------

/**
 * Instruction Format:
 * "HEAD R, IX, I, ADDR"
 * Example: STR 0, 1, 0, 0
 * Part of the content of certain instructions might be omitted with a symbol of '_'.
 * Example: AIR, 0, _, _, 1
 */

/**
 * New Instructions:
 * LE rx, ry, rz: c(rz) = (c(rx) <= c(ry)), rz is the last two digits in address.
 * GE rx, ry, rz: c(rz) = (c(rx) >= c(ry)), rz is the last two digits in address.
 * ET rx, ry, rz: c(rz) = (c(rx) == c(ry)), rz is the last two digits in address.
 */

// start of variables
// M[8] = 1984

// RFS 0
// M[10] = 13312

// initialize X[1] for variables
LIX _, 1, _, 0
LDX _, 1, 0, 8

/**
 * Variable Definition:
 * STR 0, 1, 0, 0 para
 * STR 0, 1, 0, 1 pattern
 * STR 0, 1, 0, 2 word
 * STR 0, 1, 0, 3 sentence
 * STR 0, 1, 0, 4 start
 * STR 0, 1, 0, 5 i
 * STR 0, 1, 0, 6 j
 * (Disregarded) STR 0, 1, 0, 7 constant 0
 * STR 0, 1, 0, 8 constant -1
 * STR 0, 1, 0, 9 constant 97 (a)
 * STR 0, 1, 0, 10 constant 122 (z)
 * STR 0, 1, 0, 11 constant 39 (')
 * STR 0, 1, 0, 12 constant 46 (.)
 * STR 3, 1, 0, 13 loop 1 start
 * STR 3, 1, 0, 14 loop 1 end
 * STR 3, 1, 0, 15 loop 2 start
 * STR 3, 1, 0, 16 loop 2 end
 * STR 3, 1, 0, 17 branch 1
 * STR 3, 1, 0, 18 branch 2
 * STR 3, 1, 0, 19 branch 3
 * STR 3, 1, 0, 20 branch 4
 * STR 3, 1, 0, 21 branch 5
 * STR 0, 1, 0, 22 addr(para[start + j])
 * STR 0, 1, 0, 23 addr(para[i])
 * STR 0, 1, 0, 24 addr(pattern[j])
 * STR 0, 1, 0, 25 constant 108
 * STR 0, 1, 0, 26 constant 86
 * STR 0, 1, 0, 27 constant 85
 */

// store the initial address of paragraph into M[M[8]], and output
    //    GETS 0, _, _, 2
    //    STR 0, 1, 0, 0

    TRAP _, _, _, 0
    STR 1, 1, 0, 0

    //    // output paragraph
    //    LDR 0, 1, 0, 0
    //    PUTS 0, _, _, 1

// store the initial address of word into M[M[8] + 1]
    // M[7] = 1, for I/O control
    LDA 0, 0, 0, 1
    STR 0, 0, 0, 7

    IN 0, _, _, 0
    STR 0, 1, 0, 1

    //    // output pattern
    //    LDR 0, 1, 0, 1
    //    PUTS 0, _, _, 1
    //
    //    // M[7] = 0, for I/O control
    //    LDA 0, 0, 0, 0
    //    STR 0, 0, 0, 7
    
    LDR 1, 1, 0, 1
    TRAP _, _, _, 1

// STR 0, 1, 0, 2 word, word = 0
LDA 0, 0, 0, 0
STR 0, 1, 0, 2
// STR 0, 1, 0, 3 sentence, sentence = 1
LDA 0, 0, 0, 1
STR 0, 1, 0, 3
// STR 0, 1, 0, 8 constant -1
LDA 0, 0, 0, 0
SIR 0, _, _, 1
STR 0, 1, 0, 8
// STR 0, 1, 0, 4 start, start = -1
LDR 0, 1, 0, 8
STR 0, 1, 0, 4
// STR 0, 1, 0, 5 i, i = 0
LDA 0, 0, 0, 0
STR 0, 1, 0, 5
// STR 0, 1, 0, 9 constant 97 (a)
LDA 0, 0, 0, 1
SRC 0, 1, 1, 7
SIR 0, _, _, 31
STR 0, 1, 0, 9
// STR 0, 1, 0, 10 constant 122 (z)
LDA 0, 0, 0, 1
SRC 0, 1, 1, 7
SIR 0, _, _, 6
STR 0, 1, 0, 10
// STR 0, 1, 0, 11 constant 39 (')
LDA 0, 0, 0, 1
SRC 0, 1, 1, 5
AIR 0, _, _, 7
STR 0, 1, 0, 11
// STR 0, 1, 0, 12 constant 46 (.)
LDA 0, 0, 0, 1
SRC 0, 1, 1, 5
AIR 0, _, _, 14
STR 0, 1, 0, 12
// STR 0, 1, 0, 25 constant 108
LDA 0, 0, 0, 1
SRC 0, 1, 1, 7
SIR 0, _, _, 20
STR 0, 1, 0, 25
// STR 0, 1, 0, 26 constant 86
LDA 0, 0, 0, 1
SRC 0, 1, 1, 6
AIR 0, _, _, 22
STR 0, 1, 0, 26
// STR 0, 1, 0, 27 constant 85
SIR 0, _, _, 1
STR 0, 1, 0, 27

// -----------------------------------------------------------------------------

// JSR to 10 and RFS in order to obtain PC + 1 into R[3]
JSR _, 0, 0, 10

// Add 4 (to get the loop 1 start address for jumping back)
AIR 3, _, _, 4
// STR 3, 1, 0, 13 loop 1 start
STR 3, 1, 0, 13

// On the basis of previous addition, Add 108 (to get the loop 1 end address for jumping out)
AMR 3, 1, 0, 25
// STR 3, 1, 0, 14 loop 1 end
STR 3, 1, 0, 14

// loop 1 start, R[1] = para[i]
LDR 0, 1, 0, 0
AMR 0, 1, 0, 5
STR 0, 1, 0, 23
LDR 1, 1, 1, 23
// if R[1] == 0 jump out to loop 1 end
JZ 1, 1, 1, 14

    // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
    JSR _, 0, 0, 10
    // Add 86 (to get the branch 1 address)
    AMR 3, 1, 0, 26
    // STR 3, 1, 0, 17 branch 1
    STR 3, 1, 0, 17

    // construct the condition for if 1 to R[2]
    LDR 0, 1, 0, 9
    GE 1, 0, _, 2
    LDR 0, 1, 0, 10
    LE 1, 0, _, 3
    AND 2, 3, _, _
    LDR 0, 1, 0, 11
    ET 1, 0, _, 3
    ORR 2, 3, _, _
    NOT 2, _, _, _

    // if R[2] == 0 jump to branch 1
    JZ 2, 1, 1, 17

        // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
        JSR _, 0, 0, 10
        // Add 85 (to get the branch 2 address)
        AMR 3, 1, 0, 27
        // STR 3, 1, 0, 18 branch 2
        STR 3, 1, 0, 18

        // construct the condition for if 2
        LDR 1, 1, 0, 4
        LDR 2, 1, 0, 8
        TRR 1, 2, _, _

        // if start == -1 jump to branch 2
        JCC 3, 1, 1, 18
        
            // STR 1, 1, 0, 6 j = 0
            LDA 1, 0, 0, 0
            STR 1, 1, 0, 6 

            // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
            JSR _, 0, 0, 10

            // Add 4 (to get the loop 2 start address for jumping back)
            AIR 3, _, _, 4
            // STR 3, 1, 0, 15 loop 2 start
            STR 3, 1, 0, 15

            // On the basis of previous addition, add 25 (to get the loop 2 end address for jumping out)
            AIR 3, _, _, 25
            // STR 3, 1, 0, 16 loop 2 end
            STR 3, 1, 0, 16

            // loop 2 start, R[1] = pattern[j]
            LDR 1, 1, 0, 1
            AMR 1, 1, 0, 6
            STR 1, 1, 0, 24
            LDR 1, 1, 1, 24

            // construct condition for loop 2 into R[3]
            LDA 0, 0, 0, 0
            ET 1, 0, _, 3
            NOT 3, _, _, _
            LDR 0, 1, 0, 4
            AMR 0, 1, 0, 6
            LDR 2, 1, 0, 5
            SIR 2, _, _, 1
            LE 0, 2, _, 2
            AND 3, 2, _, _
            LDR 0, 1, 0, 0
            AMR 0, 1, 0, 4
            AMR 0, 1, 0, 6
            STR 0, 1, 0, 22
            LDR 0, 1, 1, 22
            ET 1, 0, _, 2
            AND 3, 2, _, _

            // if R[3] == 0 jump out to loop 2 end
            JZ 3, 1, 1, 16

                // loop 2 increment
                LDR 0, 1, 0, 6
                AIR 0, _, _, 1
                STR 0, 1, 0, 6
                
                // jump back to loop 2 start
                JMA _, 1, 1, 15

            // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
            JSR _, 0, 0, 10
            // Add 16 (to get the branch 3 address)
            AIR 3, _, _, 16
            // STR 3, 1, 0, 19 branch 3
            STR 3, 1, 0, 19

            // construct the condition for if 3            
            LDA 0, 0, 0, 0
            ET 1, 0, _, 3
            LDR 1, 1, 0, 4
            AMR 1, 1, 0, 6
            LDR 2, 1, 0, 5
            ET 1, 2, _, 2
            AND 3, 2, _, _

            // if R[3] == 0 jump to branch 3
            JZ 3, 1, 1, 19

                // output pattern, sentence, word
                LDR 1, 1, 0, 1
                TRAP _, _, _, 1
                LDR 2, 1, 0, 3
                LDR 3, 1, 0, 2
                OUT 2, _, _, 1
                OUT 3, _, _, 1

            // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
            JSR _, 0, 0, 10
            // Add 14 (to get the branch 4 address)
            AIR 3, _, _, 14
            // STR 3, 1, 0, 20 branch 4
            STR 3, 1, 0, 20

            // construct the condition for if 4
            LDR 0, 1, 0, 0
            AMR 0, 1, 0, 5
            STR 0, 1, 0, 23
            LDR 0, 1, 1, 23
            LDR 1, 1, 0, 12
            ET 0, 1, _, 2

            // if R[2] == 0 jump to branch 4
            JZ 2, 1, 1, 20
            
                // reset word and increment sentence
                LDA 0, 0, 0, 0
                STR 0, 1, 0, 2
                LDR 0, 1, 0, 3
                AIR 0, _, _, 1
                STR 0, 1, 0, 3

            // reset start
            LDR 0, 1, 0, 8
            STR 0, 1, 0, 4

            // jump to brach 2
            JMA _, 1, 1, 18

    // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
    JSR _, 0, 0, 10
    // Add 11 (to get the branch 5 address)
    AIR 3, _, _, 11
    // STR 3, 1, 0, 21 branch 5
    STR 3, 1, 0, 21

    // construct the condition for if 5
    LDR 0, 1, 0, 4
    LDR 1, 1, 0, 8
    ET 0, 1, _, 2

    // if R[2] == 0 jump to branch 5
    JZ 2, 1, 1, 21

        // set start and increment word
        LDR 0, 1, 0, 5
        STR 0, 1, 0, 4
        LDR 0, 1, 0, 2
        AIR 0, _, _, 1
        STR 0, 1, 0, 2

    // loop 1 increment
    LDR 0, 1, 0, 5
    AIR 0, _, _, 1
    STR 0, 1, 0, 5

    // jump back to loop 1 start
    JMA _, 1, 1, 13

// END OF PROGRAM
// (nothing here)
