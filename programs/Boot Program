// start of variable space: M[8] = 2^10 + 2^9 + 2^8 + 2^7 + 2^6 = 1984
LDA 0, 0, 0, 31
SRC 0, 1, 1, 6
STR 0, 0, 0, 8

// start of array space: M[9] = 512
LDA 0, 0, 0, 1
SRC 0, 1, 1, 9
STR 0, 0, 0, 9

// RFS 0 for obtaining PC + 1: M[10] = 13312 = 2^14 - 3072 = 2^14 - (2^11 + 2^10)
LDA 0, 0, 0, 3
SRC 0, 1, 1, 10
STR 0, 0, 0, 10
LDA 0, 0, 0, 1
SRC 0, 1, 1, 14
SMR 0, 0, 0, 10
STR 0, 0, 0, 10

// initialize X[2] for variables
LIX _, 2, _, 0
LDX _, 2, 0, 9

/*
** Variable Definition:
** STR 0, 2, 0, 0 array
** STR 0, 2, 0, 1 i
** STR 3, 2, 0, 2 loop 1 start
** STR 3, 2, 0, 3 loop 1 end
** STR 0, 2, 0, 4 constant 32
** STR 3, 2, 0, 5 boot end
** STR 0, 2, 0, 10 array[i]
** STR 0, 2, 0, 11 ... n contents of array
*/

// TRAP table address
LDA 0, 0, 0, 16
STR 0, 0, 0, 0

// STR 3, 2, 0, 4 constant 32
LDA 0, 0, 0, 1
SRC 0, 1, 1, 5
STR 0, 2, 0, 4

// JSR to 10 and RFS in order to obtain PC + 1 into R[3]
JSR _, 0, 0, 10

// Add 5 (to make M[16] = TRAP[0])
AIR 3, _, _, 7
STR 3, 0, 0, 16

// On the basis of previous addition, Add 32 (to make M[17] = TRAP[1])
AMR 3, 2, 0, 4
STR 3, 0, 0, 17

// On the basis of previous addition, Add 28 (to get boot end address)
AIR 3, _, _, 28
STR 3, 2, 0, 5

// jump to boot end
JMA _, 2, 1, 5

// -----------------------------------------------------------------------------

// TRAP[0] = GETS 1, 2 (with ECHO)
    // initialize X[2] for variables
    LIX _, 2, _, 0
    LDX _, 2, 0, 9

    // STR 0, 2, 0, 0 array
    LDA 0, 2, 0, 10
    AIR 0, _, _, 1
    STR 0, 2, 0, 0

    // STR 0, 2, 0, 1 i = 0
    LDA 0, 0, 0, 0
    STR 0, 2, 0, 1

    // M[7] = 1, for I/O control
    LDA 0, 0, 0, 1
    STR 0, 0, 0, 7

    // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
    JSR _, 0, 0, 10

    // Add 4 (to get the loop 1 start address for jumping back)
    AIR 3, _, _, 4
    // STR 3, 2, 0, 2 loop 1 start
    STR 3, 2, 0, 2

    // On the basis of previous addition, Add 11 (to get the loop 1 end address for jumping out)
    AIR 3, _, _, 11
    // STR 3, 2, 0, 3 loop 1 end
    STR 3, 2, 0, 3

    // loop 1 start, array[i] = IN, and ECHO
    LDR 0, 2, 0, 0
    AMR 0, 2, 0, 1
    STR 0, 2, 0, 10
    IN 0, _, _, 2
    OUT 0, _, _, 1
    STR 0, 2, 1, 10
    // if R[0] == 0 jump out to loop 1 end
    JZ 0, 2, 1, 3

        // loop 1 increment
        LDR 0, 2, 0, 1
        AIR 0, _, _, 1
        STR 0, 2, 0, 1

        // jump back to loop 1 start
        JMA _, 2, 1, 2

    // output line seperator
    LDA 0, 0, 0, 10
    OUT 0, _, _, 1

    // M[7] = 0, for I/O control
    LDA 0, 0, 0, 0
    STR 0, 0, 0, 7

    // TRAP[0] END
    LDR 1, 2, 0, 0
    LDR 3, 0, 0, 2
    RFS _, _, _, 0

// -----------------------------------------------------------------------------

// TRAP[1] = PUTS 1, 1
    // initialize X[2] for variables
    LIX _, 2, _, 0
    LDX _, 2, 0, 9

    // STR 0, 2, 0, 0 array
    STR 1, 2, 0, 0

    // STR 0, 2, 0, 1 i = 0
    LDA 0, 0, 0, 0
    STR 0, 2, 0, 1

    // M[7] = 1, for I/O control
    LDA 0, 0, 0, 1
    STR 0, 0, 0, 7

    // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
    JSR _, 0, 0, 10

    // Add 4 (to get the loop 1 start address for jumping back)
    AIR 3, _, _, 4
    // STR 3, 2, 0, 2 loop 1 start
    STR 3, 2, 0, 2

    // On the basis of previous addition, Add 10 (to get the loop 1 end address for jumping out)
    AIR 3, _, _, 10
    // STR 3, 2, 0, 3 loop 1 end
    STR 3, 2, 0, 3

    // loop 1 start, output array[i]
    LDR 0, 2, 0, 0
    AMR 0, 2, 0, 1
    STR 0, 2, 0, 10
    LDR 0, 2, 1, 10
    OUT 0, _, _, 1
    // if R[0] == 0 jump out to loop 1 end
    JZ 0, 2, 1, 3

        // loop 1 increment
        LDR 0, 2, 0, 1
        AIR 0, _, _, 1
        STR 0, 2, 0, 1

        // jump back to loop 1 start
        JMA _, 2, 1, 2

    // output line seperator
    LDA 0, 0, 0, 10
    OUT 0, _, _, 1

    // M[7] = 0, for I/O control
    LDA 0, 0, 0, 0
    STR 0, 0, 0, 7

    // TRAP[1] END
    LDR 3, 0, 0, 2
    RFS _, _, _, 0
