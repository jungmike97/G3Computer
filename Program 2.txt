// Original C++ Program
/*
#include <iostream>
using namespace std;

int main() {
	char para[1000] = "we can get learn from the movie...   that the father are badly sick, so. he just urges. to teach hushpuppy. how to be strong eough to survie by herself.don't ask, don't tell.";
	char pattern[100] = "can";

	cout << para << endl;
	cout << pattern << endl;

	int word, sentence;
	word = 0;
	sentence = 1;

	int start = -1;
	for (int i = 0; para[i] != '\0'; ++i) {
		// got a word
		if (!(para[i] >= 'a' && para[i] <= 'z' || para[i] == '\'')) {
			if (start != -1) {
				// compare
				int j;
				for (j = 0; pattern[j] != '\0' && start + j < i && pattern[j] == para[start + j]; ++j);
				if (pattern[j] == '\0' && start + j == i) {
					cout << sentence << endl;
					cout << word << endl;
					cout << pattern << endl;
				}

				// got a sentence
				if (para[i] == '.') {
					word = 0;
					++sentence;
				}

				start = -1;
			}
		}
		else if (start == -1) {
			start = i;
			++word;
		}
	}
	return 0;
}
*/

// -----------------------------------------------------------------------------

/*
** Instruction Format:
** "HEAD R, IX, I, ADDR"
** Example: STR 0, 1, 0, 0
** Part of the content of certain instructions might be omitted with a symbol of '_'.
** Example: AIR, 0, _, _, 1
*/

/* New Instructions
** LE rx, ry, rz: c(rz) = (c(rx) <= c(ry)), rz is the last two digits in address.
** GE rx, ry, rz: c(rz) = (c(rx) >= c(ry)), rz is the last two digits in address.
** ET rx, ry, rz: c(rz) = (c(rx) == c(ry)), rz is the last two digits in address.
** GETS r, devid
** PUTS r, devid
*/

// start of variables
// M[8] = 1024

// RFS 0
// M[10] = 13312

/*
** Variable Definition:
** STR 0, 1, 0, 0 para
** STR 0, 1, 0, 1 pattern
** STR 0, 1, 0, 2 word
** STR 0, 1, 0, 3 sentence
** STR 0, 1, 0, 4 start
** STR 0, 1, 0, 5 i
** STR 0, 1, 0, 6 j
** (Disregarded) STR 0, 1, 0, 7 constant 0
** STR 0, 1, 0, 8 constant -1
** STR 0, 1, 0, 9 constant 97 (a)
** STR 0, 1, 0, 10 constant 122 (z)
** STR 0, 1, 0, 11 constant 39 (')
** STR 0, 1, 0, 12 constant 46 (.)
** STR 3, 1, 0, 13 loop 1 start
** STR 3, 1, 0, 14 loop 1 end
** STR 3, 1, 0, 15 loop 2 start
** STR 3, 1, 0, 16 loop 2 end
** STR 3, 1, 0, 17 branch 1
** STR 3, 1, 0, 18 branch 2
** STR 3, 1, 0, 19 branch 3
** STR 3, 1, 0, 20 branch 4
** STR 3, 1, 0, 21 branch 5
** STR 0, 1, 0, 22 addr(para[start + j])
** STR 0, 1, 0, 23 addr(para[i])
** STR 0, 1, 0, 24 addr(pattern[j])
** STR 0, 1, 0, 25 constant 108
** STR 0, 1, 0, 26 constant 86
** STR 0, 1, 0, 27 constant 85
*/

// M[7] = 1, for I/O control
LDA 0, 0, 0, 1
0000110000000001
STR 0, 0, 0, 7
0000100000000111

// initialize X[1] for variables
LIX _, 1, _, 0
1000110001000000
LDX _, 1, 0, 8
1000010001001000

// store the initial address of paragraph into M[M[8]]
GETS 0, _, _, 2
1101000000000010
STR 0, 1, 0, 0
0000100001000000
// output paragraph
LDR 0, 1, 0, 0
0000010001000000
PUTS 0, _, _, 1
1101010000000001
// store the initial address of word into M[M[8] + 1]
IN 0, _, _, 0
1100010000000000
STR 0, 1, 0, 1
0000100001000001
// output pattern
LDR 0, 1, 0, 1
0000010001000001
PUTS 0, _, _, 1
1101010000000001

// M[7] = 0, for I/O control (temporary solution)
LDA 0, 0, 0, 0
0000110000000000
STR 0, 0, 0, 7
0000100000000111

// STR 0, 1, 0, 2 word, word = 0
LDA 0, 0, 0, 0
0000110000000000
STR 0, 1, 0, 2
0000100001000010
// STR 0, 1, 0, 3 sentence, sentence = 1
LDA 0, 0, 0, 1
0000110000000001
STR 0, 1, 0, 3
0000100001000011
// STR 0, 1, 0, 8 constant -1
LDA 0, 0, 0, 0
0000110000000000
SIR 0, _, _, 1
0001110000000001
STR 0, 1, 0, 8
0000100001001000
// STR 0, 1, 0, 4 start, start = -1
LDR 0, 1, 0, 8
0000010001001000
STR 0, 1, 0, 4
0000100001000100
// STR 0, 1, 0, 5 i, i = 0
LDA 0, 0, 0, 0
0000110000000000
STR 0, 1, 0, 5
0000100001000101
// STR 0, 1, 0, 9 constant 97 (a)
LDA 0, 0, 0, 1
0000110000000001
SRC 0, 1, 1, 7
0110010001100111
SIR 0, _, _, 31
0001110000011111
STR 0, 1, 0, 9
0000100001001001
// STR 0, 1, 0, 10 constant 122 (z)
LDA 0, 0, 0, 1
0000110000000001
SRC 0, 1, 1, 7
0110010001100111
SIR 0, _, _, 6
0001110000000110
STR 0, 1, 0, 10
0000100001001010
// STR 0, 1, 0, 11 constant 39 (')
LDA 0, 0, 0, 1
0000110000000001
SRC 0, 1, 1, 5
0110010001100101
AIR 0, _, _, 7
0001100000000111
STR 0, 1, 0, 11
0000100001001011
// STR 0, 1, 0, 12 constant 46 (.)
LDA 0, 0, 0, 1
0000110000000001
SRC 0, 1, 1, 5
0110010001100101
AIR 0, _, _, 14
0001100000001110
STR 0, 1, 0, 12
0000100001001100
// STR 0, 1, 0, 25 constant 108
LDA 0, 0, 0, 1
0000110000000001
SRC 0, 1, 1, 7
0110010001100111
SIR 0, _, _, 20
0001110000010100
STR 0, 1, 0, 25
0000100001011001
// STR 0, 1, 0, 26 constant 86
LDA 0, 0, 0, 1
0000110000000001
SRC 0, 1, 1, 6
0110010001100110
AIR 0, _, _, 22
0001100000010110
STR 0, 1, 0, 26
0000100001011010
// STR 0, 1, 0, 27 constant 85
SIR 0, _, _, 1
0001110000000001
STR 0, 1, 0, 27
0000100001011011

// -----------------------------------------------------------------------------

// JSR to 10 and RFS in order to obtain PC + 1 into R[3]
JSR _, 0, 0, 10
0011000000001010

// Add 4 (to get the loop 1 start address for jumping back)
AIR 3, _, _, 4
0001101100000100
// STR 3, 1, 0, 13 loop 1 start
STR 3, 1, 0, 13
0000101101001101

// On the basis of previous addition, Add 108 (to get the loop 1 end address for jumping out)
AMR 3, 1, 0, 25
0001001101011001
// STR 3, 1, 0, 14 loop 1 end
STR 3, 1, 0, 14
0000101101001110

// loop 1 start, R[1] = para[i]
LDR 0, 1, 0, 0
0000010001000000
AMR 0, 1, 0, 5
0001000001000101
STR 0, 1, 0, 23
0000100001010111
LDR 1, 1, 1, 23
0000010101110111
// if R[1] == 0 jump out to loop 1 end
JZ 1, 1, 1, 14
0010000101101110

    // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
    JSR _, 0, 0, 10
    0011000000001010
    // Add 86 (to get the branch 1 address)
    AMR 3, 1, 0, 26
    0001001101011010
    // STR 3, 1, 0, 17 branch 1
    STR 3, 1, 0, 17
    0000101101010001

    // construct the condition for if 1 to R[2]
    LDR 0, 1, 0, 9
    0000010001001001
    GE 1, 0, _, 2
    0111000100000010
    LDR 0, 1, 0, 10
    0000010001001010
    LE 1, 0, _, 3
    0110110100000011
    AND 2, 3, _, _
    0100111011000000
    LDR 0, 1, 0, 11
    0000010001001011
    ET 1, 0, _, 3
    0111010100000011
    ORR 2, 3, _, _
    0101001011000000
    NOT 2, _, _, _
    0101011000000000

    // if R[2] == 0 jump to branch 1
    JZ 2, 1, 1, 17
    0010001001110001

        // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
        JSR _, 0, 0, 10
        0011000000001010
        // Add 85 (to get the branch 2 address)
        AMR 3, 1, 0, 27
        0001001101011011
        // STR 3, 1, 0, 18 branch 2
        STR 3, 1, 0, 18
        0000101101010010

        // construct the condition for if 2
        LDR 1, 1, 0, 4
        0000010101000100
        LDR 2, 1, 0, 8
        0000011001001000
        TRR 1, 2, _, _
        0100100110000000

        // if start == -1 jump to branch 2
        JCC 3, 1, 1, 18
        0010101101110010
        
            // STR 1, 1, 0, 6 j = 0
            LDA 1, 0, 0, 0
            0000110100000000
            STR 1, 1, 0, 6 
            0000100101000110

            // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
            JSR _, 0, 0, 10
            0011000000001010

            // Add 4 (to get the loop 2 start address for jumping back)
            AIR 3, _, _, 4
            0001101100000100
            // STR 3, 1, 0, 15 loop 2 start
            STR 3, 1, 0, 15
            0000101101001111

            // On the basis of previous addition, add 25 (to get the loop 2 end address for jumping out)
            AIR 3, _, _, 25
            0001101100011001
            // STR 3, 1, 0, 16 loop 2 end
            STR 3, 1, 0, 16
            0000101101010000

            // loop 2 start, R[1] = pattern[j]
            LDR 1, 1, 0, 1
            0000010101000001
            AMR 1, 1, 0, 6
            0001000101000110
            STR 1, 1, 0, 24
            0000100101011000
            LDR 1, 1, 1, 24
            0000010101111000

            // construct condition for loop 2 into R[3]
            LDA 0, 0, 0, 0
            0000110000000000
            ET 1, 0, _, 3
            0111010100000011
            NOT 3, _, _, _
            0101011100000000
            LDR 0, 1, 0, 4
            0000010001000100
            AMR 0, 1, 0, 6
            0001000001000110
            LDR 2, 1, 0, 5
            0000011001000101
            SIR 2, _, _, 1
            0001111000000001
            LE 0, 2, _, 2
            0110110010000010
            AND 3, 2, _, _
            0100111110000000
            LDR 0, 1, 0, 0
            0000010001000000
            AMR 0, 1, 0, 4
            0001000001000100
            AMR 0, 1, 0, 6
            0001000001000110
            STR 0, 1, 0, 22
            0000100001010110
            LDR 0, 1, 1, 22
            0000010001110110
            ET 1, 0, _, 2
            0111010100000010
            AND 3, 2, _, _
            0100111110000000

            // if R[3] == 0 jump out to loop 2 end
            JZ 3, 1, 1, 16
            0010001101110000

                // loop 2 increment
                LDR 0, 1, 0, 6
                0000010001000110
                AIR 0, _, _, 1
                0001100000000001
                STR 0, 1, 0, 6
                0000100001000110
                
                // jump back to loop 2 start
                JMA _, 1, 1, 15
                0010110001101111

            // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
            JSR _, 0, 0, 10
            0011000000001010
            // Add 16 (to get the branch 3 address)
            AIR 3, _, _, 16
            0001101100010000
            // STR 3, 1, 0, 19 branch 3
            STR 3, 1, 0, 19
            0000101101010011

            // construct the condition for if 3            
            LDA 0, 0, 0, 0
            0000110000000000
            ET 1, 0, _, 3
            0111010100000011
            LDR 1, 1, 0, 4
            0000010101000100
            AMR 1, 1, 0, 6
            0001000101000110
            LDR 2, 1, 0, 5
            0000011001000101
            ET 1, 2, _, 2
            0111010110000010
            AND 3, 2, _, _
            0100111110000000

            // if R[3] == 0 jump to branch 3
            JZ 3, 1, 1, 19
            0010001101110011

                // output sentence, word, pattern
                LDR 1, 1, 0, 3
                0000010101000011
                LDR 2, 1, 0, 2
                0000011001000010
                LDR 3, 1, 0, 1
                0000011101000001
                OUT 1, _, _, 1
                1100100100000001
                OUT 2, _, _, 1
                1100101000000001
                PUTS 3, _, _, 1
                1101011100000001

            // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
            JSR _, 0, 0, 10
            0011000000001010
            // Add 14 (to get the branch 4 address)
            AIR 3, _, _, 14
            0001101100001110
            // STR 3, 1, 0, 20 branch 4
            STR 3, 1, 0, 20
            0000101101010100

            // construct the condition for if 4
            LDR 0, 1, 0, 0
            0000010001000000
            AMR 0, 1, 0, 5
            0001000001000101
            STR 0, 1, 0, 23
            0000100001010111
            LDR 0, 1, 1, 23
            0000010001110111
            LDR 1, 1, 0, 12
            0000010101001100
            ET 0, 1, _, 2
            0111010001000010

            // if R[2] == 0 jump to branch 4
            JZ 2, 1, 1, 20
            0010001001110100
            
                // reset word and increment sentence
                LDA 0, 0, 0, 0
                0000110000000000
                STR 0, 1, 0, 2
                0000100001000010
                LDR 0, 1, 0, 3
                0000010001000011
                AIR 0, _, _, 1
                0001100000000001
                STR 0, 1, 0, 3
                0000100001000011

            // reset start
            LDR 0, 1, 0, 8
            0000010001001000
            STR 0, 1, 0, 4
            0000100001000100

            // jump to brach 2
            JMA _, 1, 1, 18
            0010110001110010

    // JSR to 10 and RFS in order to obtain PC + 1 into R[3]
    JSR _, 0, 0, 10
    0011000000001010
    // Add 11 (to get the branch 5 address)
    AIR 3, _, _, 11
    0001101100001011
    // STR 3, 1, 0, 21 branch 5
    STR 3, 1, 0, 21
    0000101101010101

    // construct the condition for if 5
    LDR 0, 1, 0, 4
    0000010001000100
    LDR 1, 1, 0, 8
    0000010101001000
    ET 0, 1, _, 2
    0111010001000010

    // if R[2] == 0 jump to branch 5
    JZ 2, 1, 1, 21
    0010001001110101

        // set start and increment word
        LDR 0, 1, 0, 5
        0000010001000101
        STR 0, 1, 0, 4
        0000100001000100
        LDR 0, 1, 0, 2
        0000010001000010
        AIR 0, _, _, 1
        0001100000000001
        STR 0, 1, 0, 2
        0000100001000010

    // loop 1 increment
    LDR 0, 1, 0, 5
    0000010001000101
    AIR 0, _, _, 1
    0001100000000001
    STR 0, 1, 0, 5
    0000100001000101

    // jump back to loop 1 start
    JMA _, 1, 1, 13
    0010110001101101

// END OF PROGRAM
// (nothing here)